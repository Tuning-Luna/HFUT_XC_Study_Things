LEX 词法分析程序产生器
YACC  语法分析程序产生器

ADVANCE，把输入串指示器IP指向下一个输入符号，即读入一个单字符号
SYM，IP当前所指的输入符号
ERROR，出错处理子程序

digit.lexval  表示单词符号“数”的词法值
id.entry  表示单词符号“标识符”的符号表入口
addtype(id.entry, L.in) 表示把id和type加到符号表里

建立表达式的抽象语法树
mknode (op,left,right) 建立一个运算符号结点，标号是op，两个域left和right分别指向左子树和右子树。
mkleaf (id,entry) 建立一个标识符结点，标号为id，一个域entry指向标识符在符号表中的入口。
mkleaf (num,val) 建立一个数结点，标号为num，一个域val用于存放数的值。
E.nptr 指向结点的指针

仅仅使用综合属性的属性文法称S－属性文法
一个属性文法称为L-属性文法，如果对于每个产生式A→X1X2…Xn，
其每个语义规则中的每个属性或者是综合属性，或者是Xj(1jn)的
一个继承属性且这个继承属性仅依赖于：
(1) 产生式Xj的左边符号X1，X2，…，Xj-1的属性；
(2) A的继承属性。
S-属性文法一定是L-属性文法

翻译模式：给出了使用语义规则进行计算的次序

非终结符号S有综合属性S.code，它代表赋值语句S的三地址代码。
非终结符号E有如下两个属性：
E.place表示存放E值的名字。
E.code表示对E求值的三地址语句序列。
函数newtemp的功能是，每次调用它时，将返回一个不同临时变量名字,如T1,T2,…。
函数gen产生一条三地址指令，将传入的三个参数拼接成三地址指令
函数lookup查字符是否在符号表里有等级，若有则返回标识符在符号表入口， 若无则空
函数emit将三地址代码送到输出文件中，加在文件末尾


L  综合属性L.place和L.offset
若L为简单变量：
L.offset=null              L.place=符号表入口指针
若L为数组元素（下标变量）：
L.offset=计算公式第一项，指存放VARPART （可变项）的临时变量的整数码
L.place=计算公式第二项，指存放CONSPART（不变项）的 临时变量的整数码  

E  综合属性E.place，保存E值的变量在符号表中的位置
Elist  综合属性Elist.array，ndim，place
Elist.array：数组名在符号表中的位置【记录数组名】
Elist.ndim：目前已经识别出的下标表达式的个数【下标过程计数器】
Elist.place：保存递推公式中em值的临时变量在符号表中的位置
【表示临时变量，用来临时存放已形成的Elist种的下标表达式计算出来的值】
函数
limit(array, j)：返回array指向的数组第j维的长度
invariant(array)：返回array指向的数组的地址计算公式中的不变项

E.type表示非终结符E的类型属性 


关于布尔表达式的数值表示法的翻译模式
过程emit将三地址代码送到输出文件中
nextstat给出输出序列中下一条三地址语句的地址索引
每产生一条三地址语句后，过程emit便把nextstat加1 


每次调用函数newlabel后都返回一个新的符号标号
对于一个布尔表达式E，引用两个标号
E.true是E为‘真’时控制流转向的标号
E.false是E为‘假’时控制流转向的标号

约定 
四元式(jnz, a, -, p) 	 表示    if  a  goto  p 
四元式(jrop, x, y, p)表示    if  x rop y  goto  p
四元式(j, -, -, p)        表示    goto  p

为非终结符E赋予两个综合属性E.truelist和E.falselist
它们分别记录布尔表达式E所应的四元式中需回填“真”、“假”出口的四元式的标号所构成的链表 
为了处理E.truelist和E.falselist ，引入下列语义变量和过程:
变量nextquad，它指向下一条将要产生但尚未形成的四元式的地址(标号)。
nextquad的初值为1，每当执行一次emit之后，nextquad将自动增1。
函数makelist(i)，它将创建一个仅含i的新链表，其中i是四元式数组的一个下标(标号)；
函数返回指向这个链的指针。
函数merge(p1,p2)，把以p1和p2为链首的两条链合并为一，作为函数值，回送合并后的链首。
过程backpatch(p, t)，其功能是完成“回填”，把p所链接的每个四元式的第四区段都填为t。

M.quad 四元式的地址标号