翻译、编译、解释（不产生目标程序，而是边解释边执行源程序本身）
编译程序的工作一般分为五个阶段:
词法分析
语法分析
语义分析与中间代码产生
优化
目标代码产生

程序设计语言：语法、语义、语用
词法：有限自动机
语法：上下文无关文法
语义：基于属性文法的语法制导翻译

程序语言的基本功能：描述数据和对数据的运算。

上下文无关文法的定义： 
一个上下文无关文法G是一个四元式
  G=(VT，VN，S，P)=（非空终结符集，非空非终结符集，开始符号，有限产生式集）

假定G是一个文法，S 是它的开始符号。
句型：从开始符号S经过0步或若干步推到的字符串
句子：仅含终结符号的句型
文法G所产生的句子的全体是一个语言，将它记为 L(G)

最左推导与最右推导：每步推导都是对最左/最右的非终结符进行替换

语法树与二义文法（如果一个文法存在某个句子对应两颗不同的语法树，则说这个文法是二义的）

对于上下文无关文法的限制 ：
1 不含P->P形式的产生式
2 每个非终结符P必须有用处

0型(短语文法，图灵机)
1型(上下文有关文法，线性界限自动机)
2型(上下文无关文法，非确定下推自动机)
3型(正规文法，有限自动机)

由文法得到语言，由语言的到文法
文法等价：描述的语言集合相等

状态转换图是一张有限方向图。

确定有限自动机M是一个五元式M=(S, Σ, f, S0, F),其中：
1. S: 有穷状态集，
2. Σ：输入字母表(有穷)，
3. f: 状态转换函数，f(s，a)=s’表示：当现行状态为s，输入字符为a时，将状态转换到下一状态s’。我们把s’称为s的一个后继状态。
4. S0∈S是唯一的一个初态；   
5 F：终态集(可空)，包含于S。

状态转换矩阵与状态转换图

Σ上的字集  V包含于Σ*  是正规集，当且仅当存在Σ上的DFA M，使得V＝L(M)

一个非确定有限自动机(NFA) M是一个五元式M=(S, Σ, f, S0, F)，其中：
1  S: 有穷状态集；
2 Σ ：输入字母表(有穷)；
3  f: 状态转换函数；
4 S0是非空的初态集；
5 F ：终态集(可空)。

从状态图中看NFA 和DFA的区别：
1 弧上的标记可以是Σ*中的一个字，而不一定是单个字符；
2 同一个字可能出现在同状态射出的多条弧上。

定义：对于任何两个有限自动机M和M’，如果L(M)=L(M’)，则称M与M’等价。
自动机理论中一个重要的结论：判定两个自动机等价性的算法是存在的。
对于每个NFA M存在一个DFA M’，使得 L(M)=L(M’)。亦即DFA与NFA描述能力相同。

自上而下分析法(Top-down)
基本思想：它从文法的开始符号出发，反复使用各种产生式，寻找"匹配"的推导。
递归下降分析法：对每一语法变量(非终结符)构造一个相应的子程序，
每个子程序识别一定的语法单位，通过子程序间的信息反馈和联合作用实现对输入串的识别。
预测分析程序
优点：直观、简单和宜于手工实现。

自下而上分析法(Bottom-up)
基本思想：从输入串开始，逐步进行“归约”，直到文法的开始符号。即从树末端开始，构造语法树。
所谓归约，是指根据文法的产生式规则，把产生式的右部替换成左部符号。
算符优先分析法：按照算符的优先关系和结合性质进行语法分析。适合分析表达式。
LR分析法：规范归约

构造不带回溯的自上而下分析算法：要消除文法的左递归性、克服回溯
一个文法消除左递归的条件：不含以空字为右部的产生式、不含回路。

构造不带回溯的自上而下分析的文法条件（LL1文法的判定方法）：
法一：
1、不含左递归
2、终结符A的各产生式first集不相交
3、终结符A的产生式中含空字的first集与follow(A)交集为空
法二：
一个文法G的预测分析表M不含多重定义入口，当且仅当该文法为LL(1)的。

自下而上分析过程：边输入单词符号，边归约。
核心问题：识别可归约串

短语，直接短语（只有父子两代），句柄（最左直接短语）
素短语（一个短语，它至少含有一个终结符，并且，除它自身之外不再含任何更小的素短语）
最左素短语

规范归约：使用句柄来定义可归约串
算符优先：使用最左素短语来定义可归约串

一个文法，如果它的任一产生式的右部都不含两个相继(并列)的非终结符，
即不含如下形式的产生式右部：…QR…， 则我们称该文法为算符文法


假若一个文法G的拓广文法G的活前缀识别自动机中的每个状态(项目集)不存在下述情况：
1) 既含移进项目又含归约项目，
2) 含有多个归约项目
则称G是一个LR(0)文法。


LL(1) 从左到右，最左推导，向前看一步
LR分析法 L从左到右扫描 R构造最右推导的逆过程
能用LL（1）分析的都能用LR分析


由源程序的语法结构所驱动的处理办法就是语法制导翻译法
语义规则的计算：产生代码、在符号表中存放信息、给出错误信息、执行任何其它动作
对输入符号串的翻译也就是根据语义规则进行计算的结果。 

基于属性文法的的处理方法：
1、依赖图
2、树遍历
3、一般扫描

如果一属性文法不存在属性之间的循环依赖关系，那么称该文法为良定义的 

所谓语法制导翻译法，直观上说就是为文法中每个产生式配上一组语义规则，
并且在语法分析的同时执行这些语义规则。
语义规则就被计算的时机：
在自上而下语法分析中，一个产生式匹配输入串成功时
在自下而上分析中，当一个产生式被用于进行归约时

常用的中间语言：
后缀式，逆波兰表示
图表示： DAG、抽象语法树
三地址代码
三元式
四元式
间接三元式

